// <auto-generated />
using System;
using HXSail.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HXSail.Migrations
{
    [DbContext(typeof(SailContext))]
    partial class SailContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HXSail.Models.AnnualFeeStructure", b =>
                {
                    b.Property<int>("Year")
                        .HasColumnName("year");

                    b.Property<double?>("AnnualFee")
                        .HasColumnName("annualFee");

                    b.Property<DateTime?>("EarlyDiscountEndDate")
                        .HasColumnName("earlyDiscountEndDate")
                        .HasColumnType("date");

                    b.Property<double?>("EarlyDiscountedFee")
                        .HasColumnName("earlyDiscountedFee");

                    b.Property<double?>("ForthAndSubsequentBoatFee")
                        .HasColumnName("forthAndSubsequentBoatFee");

                    b.Property<DateTime?>("NewMember25DiscountDate")
                        .HasColumnName("newMember25DiscountDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("NewMember50DiscountDate")
                        .HasColumnName("newMember50DiscountDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("NewMember75DiscountDate")
                        .HasColumnName("newMember75DiscountDate")
                        .HasColumnType("date");

                    b.Property<double?>("NonSailFee")
                        .HasColumnName("nonSailFee");

                    b.Property<DateTime?>("RenewDeadlineDate")
                        .HasColumnName("renewDeadlineDate")
                        .HasColumnType("date");

                    b.Property<double?>("SecondBoatFee")
                        .HasColumnName("secondBoatFee");

                    b.Property<double?>("TaskExemptionFee")
                        .HasColumnName("taskExemptionFee");

                    b.Property<double?>("ThirdBoatFee")
                        .HasColumnName("thirdBoatFee");

                    b.HasKey("Year")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("annualFeeStructure");
                });

            modelBuilder.Entity("HXSail.Models.Boat", b =>
                {
                    b.Property<int>("BoatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("boatId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoatClass")
                        .HasColumnName("boatClass")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("BoatTypeId")
                        .HasColumnName("boatTypeId");

                    b.Property<string>("HullColour")
                        .HasColumnName("hullColour")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("HullLength")
                        .HasColumnName("hullLength");

                    b.Property<int?>("MemberId")
                        .HasColumnName("memberId");

                    b.Property<string>("ParkingCode")
                        .HasColumnName("parkingCode")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SailNumber")
                        .HasColumnName("sailNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("BoatId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("BoatTypeId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ParkingCode");

                    b.ToTable("boat");
                });

            modelBuilder.Entity("HXSail.Models.BoatType", b =>
                {
                    b.Property<int>("BoatTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("boatTypeId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Chargeable")
                        .HasColumnName("chargeable");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .IsUnicode(false);

                    b.Property<string>("Image")
                        .HasColumnName("image")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Sail")
                        .HasColumnName("sail");

                    b.HasKey("BoatTypeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("boatType");
                });

            modelBuilder.Entity("HXSail.Models.Country", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasColumnName("countryCode")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<double>("FederalSalesTax")
                        .HasColumnName("federalSalesTax");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PhonePattern")
                        .HasColumnName("phonePattern")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PostalPattern")
                        .HasColumnName("postalPattern")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("CountryCode");

                    b.ToTable("country");
                });

            modelBuilder.Entity("HXSail.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("memberId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("firstName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("FullName")
                        .HasColumnName("fullName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("HomePhone")
                        .HasColumnName("homePhone")
                        .HasMaxLength(14)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .HasColumnName("postalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ProvinceCode")
                        .HasColumnName("provinceCode")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("SpouseFirstName")
                        .HasColumnName("spouseFirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SpouseLastName")
                        .HasColumnName("spouseLastName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool>("TaskExempt")
                        .HasColumnName("taskExempt");

                    b.Property<bool>("UseCanadaPost")
                        .HasColumnName("useCanadaPost");

                    b.Property<int?>("YearJoined")
                        .HasColumnName("yearJoined");

                    b.HasKey("MemberId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ProvinceCode");

                    b.ToTable("member");
                });

            modelBuilder.Entity("HXSail.Models.Membership", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("membershipId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .IsUnicode(false);

                    b.Property<double>("Fee")
                        .HasColumnName("fee");

                    b.Property<int>("MemberId")
                        .HasColumnName("memberId");

                    b.Property<string>("MembershipTypeName")
                        .IsRequired()
                        .HasColumnName("membershipTypeName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool>("Paid")
                        .HasColumnName("paid");

                    b.Property<int>("Year")
                        .HasColumnName("year");

                    b.HasKey("MembershipId");

                    b.HasIndex("MemberId");

                    b.HasIndex("MembershipTypeName");

                    b.HasIndex("Year")
                        .IsUnique();

                    b.ToTable("membership");
                });

            modelBuilder.Entity("HXSail.Models.MembershipType", b =>
                {
                    b.Property<string>("MembershipTypeName")
                        .HasColumnName("membershipTypeName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .IsUnicode(false);

                    b.Property<double>("RatioToFull")
                        .HasColumnName("ratioToFull");

                    b.HasKey("MembershipTypeName")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("membershipType");
                });

            modelBuilder.Entity("HXSail.Models.MemberTask", b =>
                {
                    b.Property<int>("MemberTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("memberTaskId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .IsUnicode(false);

                    b.Property<int?>("MemberId")
                        .HasColumnName("memberId");

                    b.Property<int?>("TaskId")
                        .HasColumnName("taskId");

                    b.Property<DateTime?>("WednesdayDate")
                        .HasColumnName("wednesdayDate")
                        .HasColumnType("datetime");

                    b.HasKey("MemberTaskId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("MemberId");

                    b.HasIndex("TaskId");

                    b.ToTable("memberTask");
                });

            modelBuilder.Entity("HXSail.Models.Parking", b =>
                {
                    b.Property<string>("ParkingCode")
                        .HasColumnName("parkingCode")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ActualBoatId")
                        .HasColumnName("actualBoatId")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("BoatTypeId")
                        .HasColumnName("boatTypeId");

                    b.HasKey("ParkingCode")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("BoatTypeId");

                    b.ToTable("parking");
                });

            modelBuilder.Entity("HXSail.Models.Province", b =>
                {
                    b.Property<string>("ProvinceCode")
                        .HasColumnName("provinceCode")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Capital")
                        .HasColumnName("capital")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnName("countryCode")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<bool>("IncludesFerderalTax")
                        .HasColumnName("includesFerderalTax");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TaxCode")
                        .HasColumnName("taxCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double>("TaxRate")
                        .HasColumnName("taxRate");

                    b.HasKey("ProvinceCode");

                    b.HasIndex("CountryCode");

                    b.ToTable("province");
                });

            modelBuilder.Entity("HXSail.Models.Surcharge", b =>
                {
                    b.Property<int>("SurchargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("surchargeId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Amount")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .IsUnicode(false);

                    b.Property<int?>("EndYear")
                        .HasColumnName("endYear");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("StartYear")
                        .HasColumnName("startYear");

                    b.HasKey("SurchargeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("surcharge");
                });

            modelBuilder.Entity("HXSail.Models.Tasks", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("taskId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("TaskId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("tasks");
                });

            modelBuilder.Entity("HXSail.Models.Town", b =>
                {
                    b.Property<string>("TownName")
                        .HasColumnName("townName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ProvinceCode")
                        .HasColumnName("provinceCode")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.HasKey("TownName");

                    b.ToTable("town");
                });

            modelBuilder.Entity("HXSail.Models.Boat", b =>
                {
                    b.HasOne("HXSail.Models.BoatType", "BoatType")
                        .WithMany("Boat")
                        .HasForeignKey("BoatTypeId")
                        .HasConstraintName("FK_boat_boatType");

                    b.HasOne("HXSail.Models.Member", "Member")
                        .WithMany("Boat")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_boat_member");

                    b.HasOne("HXSail.Models.Parking", "ParkingCodeNavigation")
                        .WithMany("Boat")
                        .HasForeignKey("ParkingCode")
                        .HasConstraintName("FK_boat_parking");
                });

            modelBuilder.Entity("HXSail.Models.Member", b =>
                {
                    b.HasOne("HXSail.Models.Province", "ProvinceCodeNavigation")
                        .WithMany("Member")
                        .HasForeignKey("ProvinceCode")
                        .HasConstraintName("FK_member_province");
                });

            modelBuilder.Entity("HXSail.Models.Membership", b =>
                {
                    b.HasOne("HXSail.Models.Member", "Member")
                        .WithMany("Membership")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_membership_member");

                    b.HasOne("HXSail.Models.MembershipType", "MembershipTypeNameNavigation")
                        .WithMany("Membership")
                        .HasForeignKey("MembershipTypeName")
                        .HasConstraintName("FK_membership_membershipType");

                    b.HasOne("HXSail.Models.AnnualFeeStructure", "AnnualFeeStrure")
                        .WithOne("Membership")
                        .HasForeignKey("HXSail.Models.Membership", "Year")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HXSail.Models.MemberTask", b =>
                {
                    b.HasOne("HXSail.Models.Member", "Member")
                        .WithMany("MemberTask")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_memberTask_member");

                    b.HasOne("HXSail.Models.Tasks", "Task")
                        .WithMany("MemberTask")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_memberTask_tasks");
                });

            modelBuilder.Entity("HXSail.Models.Parking", b =>
                {
                    b.HasOne("HXSail.Models.BoatType", "BoatType")
                        .WithMany("Parking")
                        .HasForeignKey("BoatTypeId")
                        .HasConstraintName("FK_parking_boatType");
                });

            modelBuilder.Entity("HXSail.Models.Province", b =>
                {
                    b.HasOne("HXSail.Models.Country", "CountryCodeNavigation")
                        .WithMany("Province")
                        .HasForeignKey("CountryCode")
                        .HasConstraintName("FK_province_country");
                });
#pragma warning restore 612, 618
        }
    }
}
